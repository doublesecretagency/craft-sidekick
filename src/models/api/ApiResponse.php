<?php
//
//namespace doublesecretagency\sidekick\models\api;
//
//use craft\base\Model;
//use doublesecretagency\sidekick\Sidekick;
//
//class ApiResponse extends Model
//{
//    /**
//     * @var bool Whether the API call was successful.
//     */
//    public bool $success = true;
//
//    /**
//     * @var string|null Error message, if applicable.
//     */
//    public ?string $error = null;
//
//    /**
//     * @var array All messages generated by the API response.
//     */
//    private array $_messages = [];
//
//    /**
//     * ApiResponse constructor.
//     *
//     * @param array|null $response
//     * @param array $config
//     */
//    public function __construct(?array $response, array $config = [])
//    {
//        // If an error was generated during validation
//        if ($error = $this->_validateResponse($response)) {
//            // Mark as failed, set error, and bail
//            $this->success = false;
//            $this->error = $error;
//            return;
//        }
//
//        // Parse results of the API response
//        $this->_parseResults($response['results']);
//
//        // Call parent constructor
//        parent::__construct($config);
//    }
//
//    // ========================================================================= //
//
//    /**
//     * Get all messages generated by the API response.
//     *
//     * @return array
//     */
//    public function getMessages(): array
//    {
//        return $this->_messages;
//    }
//
//    // ========================================================================= //
//
//    /**
//     * Validate the API response.
//     *
//     * @param array|null $response
//     * @return string|null
//     */
//    private function _validateResponse(?array $response): ?string
//    {
//        // If no response
//        if (!$response || !is_array($response)) {
//            return "Invalid API response.";
//        }
//
//        // If response was not successful
//        if (!$response['success']) {
//            return $response['error'];
//        }
//
//        // Get the results
//        $results = $response['results'] ?? null;
//
//        // If no results
//        if (!$results) {
//            return "Invalid API response, missing results.";
//        }
//
//        // If results are missing required keys
//        if (!isset($results['id'], $results['object'], $results['model'])) {
//            return "Invalid API response, results missing required keys: ".json_encode($results);
//        }
//
//        // Extract the response content
//        $content = ($results['choices'][0]['message']['content'] ?? null);
//
//        // If content can't be found
//        if (!$content) {
//            return "Invalid response structure from OpenAI, content can't be found.";
//        }
//
//        // Valid API response
//        return null;
//    }
//
//    /**
//     * Parse results of the API response.
//     *
//     * @param array $results
//     */
//    private function _parseResults(array $results): void
//    {
//        // Get the results data
//        $choices   = $results['choices'] ?? [];
//        $message   = $choices[0]['message'] ?? [];
//        $content   = $message['content'] ?? null;
//        $toolCalls = $message['tool_calls'] ?? null;
//
//        // If the results include tool calls
//        if ($toolCalls) {
//            // Run tool calls and bail
//            $this->_runToolCalls($toolCalls);
//            return;
//        }
//
//        // If no content was provided
//        if (!$content) {
//            // Mark as failed, set error, and bail
//            $this->success = false;
//            $this->error = "No content provided in API results.";
//            return;
//        }
//
//        // Get the OpenAI service
//        $openAi = Sidekick::$plugin->openAi;
//
//        // Create the greeting message
//        $c = $openAi->newAssistantMessage($content);
//        // Log it
//        $c->log();
//        // Append it to the chat history
//        $c->appendToChatHistory();
//
//        // Add to messages generated by the API response
//        $this->_messages[] = $c;
//    }
//
//    /**
//     * Execute the tool calls.
//     *
//     * @param array $toolCalls
//     * @return void
//     */
//    private function _runToolCalls(array $toolCalls): void
//    {
//        // Loop through each tool call
//        foreach ($toolCalls as $toolCall) {
//            // Execute the tool call
//            $this->_executeToolCall($toolCall);
//        }
//    }
//}
